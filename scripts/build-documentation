#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Description:
#  - build documentation with jazzy..

from argparse import ArgumentParser
from datetime import datetime
import subprocess
import os
import sys

PROJECT_NAME    = 'SKTiled'
RSYNC_COMMAND   = 'rsync --exclude "src" -exclude "hires" --exclude "psd" --exclude "*.psd" --exclude "*.aseprite"  --exclude "*.ase" -auvh --no-perms'
JAZZY_COMMAND   = 'jazzy'
BROWSER_COMMAND = 'open -b'
VALID_BROWSERS  = {'safari': 'com.apple.Safari', 'chrome': 'com.google.Chrome', 'firefox': 'org.mozilla.firefox'}
DEFAULT_BROWSER = 'safari'


def run_command(input_cmd):
    """
    Runs a shell command.

    params:
        input_cmd  - (str)  command to run

    """
    process = subprocess.Popen(input_cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, universal_newlines=True)
    while True:
        output = process.stdout.readline()
        print(output.strip())

        error = process.stderr
        if error is not None:
            print(error.readline().strip())

        # Do something else
        return_code = process.poll()
        if return_code is not None:
            # Process has finished, read rest of the output
            for output in process.stdout.readlines():
                print(output.strip())
            break


def mkdirpath(path):
    """
    Create a directory, including all parents.
    """
    try:
        os.makedirs(path)
    except OSError as e:
        print('Error: %s' % e.strerror)
        return False
    else:
        return True


def mkdir(path):
    """
    Create a directory.
    """
    # define the access rights
    access_rights = 0o755

    try:
        os.mkdir(path, access_rights)
    except OSError as e:
        print('Error: %s' % e.strerror)
        return False
    else:
        return True


if __name__ == '__main__':
    parser = ArgumentParser(description="build SKTiled documentation with jazzy.")
    parser.add_argument("-b", "--browser",  dest="browser", action="store", help="browser used to view the results.", default=DEFAULT_BROWSER)
    parser.add_argument("-d", "--dry-run", dest="dry_run", action="store_true", help="simulate this command.", default=False)
    parser.add_argument("-i", "--image-sync", dest="image_sync", action="store_true", help="only sync source images to html output directory.", default=False)
    parser.add_argument("-t", "--theme", dest="message", help="documentation theme (ie: 'apple', 'fullwidth', 'sktiled')", default="sktiled")
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true", help="verbose output", default=True)

    args = vars(parser.parse_args())
    userBrowser = args.pop("browser").lower()
    doDryRun = args.pop("dry_run")
    doImageSyncOnly = args.pop("image_sync")


    # get the jazzy config
    currentDir = os.getcwd()
    jazzyFilename = ".jazzy.yaml"
    jazzyConfig = os.path.join(currentDir, jazzyFilename)
    JAZZY_COMMAND = '%s --config "%s"' % (JAZZY_COMMAND, jazzyConfig)

    # directory variables
    projectRoot     = None
    htmlDir         = None
    imageSourceDir  = None
    imageDestDir    = None
    indexPage       = None

    # no config?
    if not os.path.exists(jazzyConfig):
        print "# [%s]: Error: jazzy configuration file not found. Please run this command from the project root." % (PROJECT_NAME, jazzyConfig)
        sys.exit(1)


    projectRoot = currentDir
    htmlDir = os.path.join(projectRoot, "Docs", "html")
    imageSourceDir = os.path.join(projectRoot, "Docs", "images/")
    imageDestDir = os.path.join(htmlDir, "images")
    indexPage = os.path.join(htmlDir, "index.html")

    # update the image sync command
    RSYNC_COMMAND = "%s %s %s" % (RSYNC_COMMAND, imageSourceDir, imageDestDir)

    # update the browser command
    browser = VALID_BROWSERS[DEFAULT_BROWSER]
    if userBrowser in VALID_BROWSERS:
        browser = VALID_BROWSERS[userBrowser]
        BROWSER_COMMAND = '%s "%s" %s' % (BROWSER_COMMAND, browser, indexPage)


    if not os.path.exists(imageDestDir):
        if not mkdirpath(imageDestDir):
            print "# [%s]: Error: cannot create directory at ''%s'" % (PROJECT_NAME, imageDestDir)
            sys.exit(1)


    # only sync images
    if doImageSyncOnly:
        print "\n\n# [%s]: Syncing images '%s' -> '%s'" % (PROJECT_NAME, imageSourceDir, imageDestDir)
        run_command(RSYNC_COMMAND)
        sys.exit(0)


    if doDryRun == True:
        print '\n\nOUTPUT:\n-------'
        print '  ➞ %s' % JAZZY_COMMAND
        print '  ➞ %s' % RSYNC_COMMAND
        print '  ➞ %s' % BROWSER_COMMAND
        print '-------'
        sys.exit(0)

    else:
        run_command(JAZZY_COMMAND)
        run_command(RSYNC_COMMAND)
        run_command(BROWSER_COMMAND)
        sys.exit(0)

    sys.exit(0)
